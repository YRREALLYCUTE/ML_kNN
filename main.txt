import numpy as np
import matplotlib as mpl
import heapq

mpl.use('Agg')

# 导入数据
def load_file(filename):
    x = open(filename)
    array_of_lines = x.readlines()
    number_of_lines = len(array_of_lines)
    return_mat = np.zeros((number_of_lines, 266))
    class_label_vector = []
    index = 0
    for line in array_of_lines:
        line = line.strip()
        list_from_line = line.split(' ')
        return_mat[index, :] = list_from_line[0:266]

        class_label_vector.append(int(list_from_line[-1]))
        index += 1

    print(type(return_mat))
    return return_mat


# 返回未排序的结果
def get_distance(data1, data2):
    distance_list = []
    for index in range(data2.shape[0]):
        vec = data2[index, :]
        distance_list.append(euclidean(data1, vec))
    return distance_list


# 计算向量之间的距离
def euclidean(v1, v2):
    sum = 0.0
    for i in range(len(v2)):
        if v1[i] != v2[i]:
            sum += 1
    return sum


# 取距离最近的前k个值，并记录其对应的下标
def knn(distance_list, k):
    # 方案一 使用numpy中的函数argsort()实现（猜想该函数的复杂度较高，所以自己写排序函数）
    # temp = np.argsort(distance_list)
    # temp_res = []
    # for i in range(k + 1):
    #    temp_res.append(temp[i])

    # 方案二 堆排序
    temp_res = list(map(distance_list.index, heapq.nsmallest(k + 1, distance_list)))

    # -------------- 原方案 ------------------------
    #     temp_res = np.array(range(0, k+1)).reshape(1,k+1)
    #
    #     for i in range(k+1):
    #         temp_res[0][i] = 256
    #
    #     for i in range(len(distance_list)):
    #         for j in range(k+1):
    #             if distance_list[i] < temp_res[0][j]:
    #
    #                 for l in range(k - j):
    #                     temp_res[0][k - l] = temp_res[0][k - l]
    #                 temp_res[0][j] = i
    #                 break

    return temp_res


# 分析得到的k个值，确定包含最多的类别，对于相同的类别，按照距离进行判断
def get_result(data_result, temp_res):
    res = []
    real = -1

    for i in range(len(temp_res)):
        temp = data_result[temp_res[i], :]
        for j in range(len(temp)):
            if temp[j] == 1:
                if i != 0:
                    res.append(j)
                else:
                    real = j
                break

    res_t = []
    for i in range(len(res)):
        res_t.append(res[i])
        res_t.append(res[i])
        if res[i] == 8 or res[i] == 9:
            res_t.append(res[i])

    count = np.bincount(res_t)
    result = np.argmax(count)
    return result, real


if __name__ == '__main__':
    # 初始数据读入
    data = load_file('semeion_train.data')
    data_train = data[:, 0:255]
    data_result = data[:, 256:266]

    k_val = input("input k(k != 0)：")
    count_test = 0

    # 测试
    test = load_file("semeion_test.data")
    for index in range(test.shape[0]):
        row = test[index, :]
        temp = data_train
        dis_list = get_distance(row, temp)
        k_res = knn(dis_list, int(k_val))
        res_end = get_result(data_result, k_res)
        if res_end[0] == res_end[1]:
            count_test = count_test + 1
        print("raw:", res_end[1], ",pre:", res_end[0])

    print("k值：", int(k_val))
    print("准确率：", count_test / test.shape[0])
    print("错误率：", 1 - count_test / test.shape[0])